---
title: "Explorer une population de 100 millions de personnes‚Ä¶ pour z√©ro budget"
author: "Laurent PELLET - ISPF"
format: pptx
editor: visual
---

La statistique n‚Äôest pas r√©serv√©e aux supercalculateurs ni aux logiciels co√ªteux.

Avec **R** et quelques packages libres, il est possible de manipuler et d‚Äôanalyser **des centaines de millions d‚Äôindividus** sur un simple ordinateur.

## üéØ Objectif du projet

- G√©n√©rer une **population fictive r√©aliste** compos√©e de millions d‚Äôindividus, dot√©s de caract√©ristiques coh√©rentes.
- L'analyser rapidement en utilisant deux m√©thodes
  - [`data.table`](https://rdatatable.gitlab.io/data.table/) ‚Äî g√©n√©ration vectoris√©e ultra-rapide  
  - [`arrow`](https://cran.r-project.org/package=arrow) ‚Äî lecture/√©criture en format **Parquet**  


## üìä Structure du jeu de donn√©es

| Colonne          | Description                                    |
| ---------------- | ---------------------------------------------- |
| `prenom`         | Pr√©nom simul√© selon le sexe                    |
| `age`            | √Çge recalcul√© √† partir de la date de naissance |
| `date_naissance` | Date de naissance coh√©rente avec l‚Äô√¢ge         |
| `sexe`           | Sexe biologique simul√© (‚ÄúHomme‚Äù / ‚ÄúFemme‚Äù)     |
| `taille`         | Taille en cm, distribu√©e selon le sexe         |
| `niveau_etudes`  | Niveau d‚Äô√©tudes selon l‚Äô√¢ge                    |


## Aper√ßu des donn√©es

| prenom  | age | date_naissance | sexe  | taille | niveau_etudes |
|----------|-----|----------------|--------|---------|----------------|
| Sacha    | 23  | 2002-05-27     | Homme  | 186.3   | Bac            |
| Simon    | 28  | 1997-05-24     | Homme  | 183.1   | CAP/BEP        |
| Louna    | 30  | 1995-07-05     | Femme  | 164.4   | Master         |
| Charles  | 27  | 1998-10-09     | Homme  | 166.0   | CAP/BEP        |
| Simon    | 52  | 1973-06-17     | Homme  | 177.8   | Licence        |
| Robin    | 77  | 1948-05-29     | Homme  | 178.6   | Coll√®ge        |

## üíæ Formats produits


| N    | CSV     | Parquet |
|------|---------|---------|
| 1M   | 40 Mo   | 5 Mo    |
| 10M  | 407 Mo  | 56 Mo   |
| 100M | 4072 Mo | 564 Mo  |

Compatibles avec :
**R**, **Python (pandas)**, **Spark**, **Arrow**, etc.


## üîç CSV vs Parquet

| Crit√®re                | CSV              | Parquet                                 |
| ---------------------- | ---------------- | --------------------------------------- |
| Taille du fichier      | Large            | 5‚Äì10√ó plus petit                        |
| Lecture                | Lente            | Tr√®s rapide                             |
| √âcriture               | Rapide           | Moyenne (compression)                   |
| Conservation des types | Non              | Oui                                     |
| Compatibilit√©          | Universelle      | Outils modernes                         |
| Id√©al pour             | √âchanges simples | Stockage massif                         |


## Analyse data.table (CSV)

```r
Results_DT <- DT[ , .(
  N          = .N,
  moy_age    = mean(age),
  p95_age    = quantile(age, 0.95),
  moy_taille = mean(taille),
  sd_taille  = sd(taille)
), by = age][order(age)]
```

* Lecture compl√®te du CSV en m√©moire
* Calcul ultra-rapide une fois charg√©
* Excellente performance RAM
* Limite : m√©moire disponible


## Analyse Arrow (Parquet)

```r
query <- DTPQ %>%
  group_by(age) %>%
  summarise(
    N          = n(),
    moy_age    = mean(age),
    p95_age    = quantile(age, 0.95),
    moy_taille = mean(taille),
    sd_taille  = sd(taille)
  )
Results_Parquet <- query |> collect()
```

* Lecture **lazy** (√† la demande)
* Colonnes lues : `age`, `taille`
* Calcul **d√©port√©** dans Arrow
* Id√©al pour donn√©es massives

## ‚öñÔ∏è Comparaison

| Aspect                     | `arrow` (Parquet)     | `data.table` (CSV) |
| -------------------------- | --------------------- | ------------------ |
| Lecture                    | Lazy                  | RAM compl√®te       |
| Format                     | Colonnaire, compress√© | Texte brut         |
| Colonnes lues              | S√©lectives            | Toutes             |
| Calcul                     | Moteur Arrow          | Local              |
| Performance grands volumes | Excellente            | Limit√©e            |
| Id√©al pour                 | Big Data              | Donn√©es locales    |


## üöÄ Performances

| Taille    | G√©n√©ration | Analyse (Arrow) | Analyse (data.table) |
| --------- | ---------- | --------------- | -------------------- |
| **1 M**   | 1.0 s      | 0.1 s           | 0.2 s                |
| **10 M**  | 8.4 s      | 0.4 s           | 2.0 s                |
| **100 M** | 87.2 s     | 4.3 s           | 17.8 s               |

Croissance quasi lin√©aire


## üß≠ En r√©sum√©

- **Arrow + Parquet** : pour lire et agr√©ger rapidement d‚Äô√©normes volumes sans les charger int√©gralement.
- **data.table + CSV** : pour des analyses rapides en RAM.


